#! /usr/bin/perl6

use NativeCall;
use Game;

sub inputAvailable() returns Int is native('input') { ... }

my $conn = IO::Socket::INET.new(:host('localhost'), :port(3939))
		but role { 
			use JSON::Tiny;
			method give($hash){ self.send(to-json($hash)) }
			method take()     { from-json($!PIO.recv()) }
			method read()     { $!PIO.recv() }

			method ready () { 
					fail("Not connected") unless $!PIO; 
					return $!PIO.poll(1, 0, 0); 
			}

		};
		
$conn.give({s=>'login',name=>'Bruce'});
my $r = $conn.read();

my $game = client('Base');

my %commands = (
	'create' => sub ($name, $type, :$cmd) {
		$game = client($type);
		$conn.give({s=>'create',name=>$name,game=>$type});
	},
	'join' => sub ($name, :$cmd) {
		$game = client($name);
		$conn.give({s=>'join',name=>$name});
	},
	'quit' => sub (:$cmd) { exit 0 },
	'exit' => sub (:$cmd) { exit 0 },
);

say "Games available: ", games_available.join(' ');

print ">> ";
loop {
	if (inputAvailable) {
		my $input = $*IN.get;
		my ($cmd, @args) = $input.split(' ');
		my &f = %commands{$cmd};
		if (&f.defined) {
			try {
				&f(:$cmd, |@args);
				CATCH {
					say $!;
					say gather {
						take $cmd;
						for &f.signature.params -> $s {
							take $s.name.substr(1) unless $s.optional;
						}
					}.join(' ');
				}
			}
		}
		else {
			$conn.give({ g=>'guess', guess=>$input});
		}
		print ">> ";
	}
	sleep(.1);
	say $conn.read if $conn.ready;
}
