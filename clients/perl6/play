#! /usr/bin/perl6

use NativeCall;
use Game;

sub inputAvailable() returns Int is native('input') { ... }

sub games_available() {
	my @games;
	for dir('Commands', :test(/.*\.p<[m6]>$/)) -> $file {
		next if $file ~~ 'Base.pm';
		my $module = $file;
		$module ~~ s:g/\//::/;
		$module ~~ s/...$//;
		@games.push($module);
	}
	return @games;
}

sub client(Str $game) {
	my $module = "Commands::$game";
	require $module;
	return "$module.new".eval;
}

my $conn = IO::Socket::INET.new(:host('localhost'), :port(3939))
		but role { 
			use JSON::Tiny;
			method give($hash){ self.send(to-json($hash)) }
			method take()     { from-json($!PIO.recv()) }
			method read()     { $!PIO.recv() }

			method ready () { 
					fail("Not connected") unless $!PIO; 
					return $!PIO.poll(1, 0, 0); 
			}

		};
		
$conn.give({s=>'login',name=>'Bruce'});
my $r = $conn.read();

my $meta = client('Server');
my $game;

say "Games available: ", games_available.join(' ');

print ">> ";
loop {
	if (inputAvailable) {
		my $input = $*IN.get;
		my $message = $server.command($input) || $game.command($input);
		$conn.give($message) if $message.defined;
		print ">> ";
	}
	sleep(.1);
	if $conn.ready {
		%resp = $conn.take;
		%resp{s}.defined ?? $server.message(%resp) !! $game.message(%resp);
	}
}
