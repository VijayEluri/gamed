package gamed;

/*
 * Login.java
 *
 * Created on July 4, 2008, 1:15 AM
 */
import javax.swing.JApplet;
import java.awt.CardLayout;
import java.lang.Thread;

/**
 *
 * @author  bruce
 */
public class Login extends JApplet implements Server, Runnable {
    private Client client;
    private Game currentGame;
    private Thread thread;
    private volatile boolean running;
    private boolean eraseStatus;

    public void init() {
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        client = null;
    }

    public void start() {
        if (client != null) {
            if (thread == null) {
                thread = new Thread(this);
                thread.start();
            }
        }
    }
    
    public void run() {
        running = true;
        while(running) {
            if (eraseStatus) {
                statusLabel.setText("");
            }
            eraseStatus = true;
            listGames();
            showGameInstances();
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                running = false;
            }
        }
    }
    
    public void stop() {
        if (thread != null && thread.isAlive()) {
            running = false;
            thread.interrupt();
        }
        thread = null;
    }
    
    public java.awt.Image getImage(String name) {
        return super.getImage(getDocumentBase(), name);
    }
    
    public java.net.Socket getSocket() {
        if (client == null) {
            return null;
        }
        return client.socket;
    }
    
    /**
     * Handles IOExceptions... ok, so its really socket errors
     * I'm not sure what the best thing to do with this is, so for now,
     * I'm just going to disconnect the socket and send you to the connect
     * screen.<br/>
     * Options:
     * <ul>
     * <li>Reconnect and put you on game selection screen (current behaviour)</li>
     * <li>Disconnect entirely and return you to the connect screen</li>
     * <li>Attempt to reconnect to previous game</li>
     * <li>Check the game author's preference (what I'll move to)</li>
     * </ul>
     * 
     * @param e The IOException raised by a socket call
     */
    public void handleIOException(java.io.IOException e) {
        try {
            client.socket.close();
        }
        catch (java.io.IOException ign) {
            // already aborting, just ignore it
        }
        currentGame.stop();
        client = null;
        connectButtonActionPerformed(null);
    }
    
    public void quitGame() {
        client.quitGame();
        currentGame.stop();
        showGameCard();
        listGames();
        java.awt.Container c = this.getContentPane();
        c.remove(currentGame);
        start();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        connectButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gameList = new javax.swing.DefaultListModel();
        availableGameList = new javax.swing.JList(gameList);
        jScrollPane2 = new javax.swing.JScrollPane();
        instanceList = new javax.swing.DefaultListModel();
        gameInstanceList = new javax.swing.JList(instanceList);
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        createButton = new javax.swing.JButton();
        userGame = new javax.swing.JTextField();
        joinButton = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.CardLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridLayout(2, 0));

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Username ");
        jPanel3.add(jLabel1, new java.awt.GridBagConstraints());

        username.setPreferredSize(new java.awt.Dimension(100, 27));
        jPanel3.add(username, new java.awt.GridBagConstraints());

        jPanel2.add(jPanel3);

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        jPanel4.add(connectButton);

        jPanel2.add(jPanel4);

        jPanel1.add(jPanel2, new java.awt.GridBagConstraints());

        getContentPane().add(jPanel1, "login");

        jPanel5.setMinimumSize(new java.awt.Dimension(640, 375));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.GridLayout(1, 0));

        jLabel2.setText("Available Games");
        jPanel8.add(jLabel2);

        jLabel3.setText("Running Games");
        jPanel8.add(jLabel3);

        jPanel5.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        availableGameList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        availableGameList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availableGameListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(availableGameList);

        jPanel7.add(jScrollPane1);

        gameInstanceList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        gameInstanceList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                gameInstanceListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(gameInstanceList);

        jPanel7.add(jScrollPane2);

        jPanel5.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.GridLayout(0, 1));

        jPanel9.setLayout(new java.awt.GridLayout(1, 0));

        jPanel11.setLayout(new java.awt.GridLayout(1, 0));

        createButton.setText("Create Game");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        jPanel11.add(createButton);
        jPanel11.add(userGame);

        jPanel9.add(jPanel11);

        joinButton.setText("Join Game");
        joinButton.setEnabled(false);
        joinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinButtonActionPerformed(evt);
            }
        });
        jPanel9.add(joinButton);

        jPanel6.add(jPanel9);

        jPanel10.setLayout(new java.awt.GridLayout(1, 0));

        statusLabel.setForeground(java.awt.Color.red);
        jPanel10.add(statusLabel);

        jPanel6.add(jPanel10);

        jPanel5.add(jPanel6, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel5, "games");
    }// </editor-fold>//GEN-END:initComponents

    private void joinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinButtonActionPerformed
        String game = ((String)availableGameList.getSelectedValue()).split("\\(")[0];
        String instance = gameInstanceList.getSelectedValue().toString();
        if (client.joinGame(game, instance)) {
            startGame(game);
        }
        else {
            eraseStatus = false;
            statusLabel.setText(String.format("Game '%s' is full", instance));
        }
}//GEN-LAST:event_joinButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        client = new Client(getDocumentBase().getHost(), username.getText());
        showGameCard();
        start();
}//GEN-LAST:event_connectButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        String game = ((String)availableGameList.getSelectedValue()).split("\\(")[0];
        String name = userGame.getText();
        if (client.createGame(game,name)) {
            startGame(game);
        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void availableGameListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availableGameListValueChanged
        if (evt.getValueIsAdjusting() == false) {
            showGameInstances();
        }
    }//GEN-LAST:event_availableGameListValueChanged

    private void gameInstanceListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_gameInstanceListValueChanged
        if (evt.getValueIsAdjusting() == false) {
            if (gameInstanceList.getSelectedIndex() == -1) {
                joinButton.setEnabled(false);
            } else {
                joinButton.setEnabled(true);
            }
        }
    }//GEN-LAST:event_gameInstanceListValueChanged
    
    private void showGameInstances() {
        if (availableGameList.getSelectedIndex() != -1) {
            String game = availableGameList.getSelectedValue().toString().split("\\(", 2)[0];
            String instances[] = client.list_instances(game);
            gameList.set(availableGameList.getSelectedIndex(), String.format("%s(%s)", game, instances[0]));
            instanceList.clear();
            for (int i=1; i<instances.length; i++) {
                instanceList.addElement(String.format("%s", instances[i]));
            }
            if (instances.length > 1) {
                gameInstanceList.setSelectedIndex(0);
            }
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.DefaultListModel gameList;
    private javax.swing.JList availableGameList;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton createButton;
    private javax.swing.DefaultListModel instanceList;
    private javax.swing.JList gameInstanceList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton joinButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField userGame;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

    private void listGames() {
        int selected = availableGameList.getSelectedIndex();
        if (selected == -1) { selected = 0; }
        String[] games = client.list_games();
        String[] toks;
        if (gameList.size() > games.length) {
            gameList.removeRange(games.length, gameList.size()-1);
        }
        while (gameList.size() < games.length) {
            gameList.addElement("");
        }
        for (int i=0; i<games.length; i++) {
            toks = games[i].split(":");
            gameList.set(i, String.format("%s(%s)", toks[0],toks[2]));            
        }
        availableGameList.setSelectedIndex(selected);
    }

    private void showGameCard() {
        java.awt.Container c = getContentPane();
        CardLayout cl = (CardLayout) c.getLayout();
        cl.show(c, "games");
    }

    private void startGame(String game) {
        if (game.equals("SpeedRisk")) {
            currentGame = new gamed.client.SpeedRisk.Display((Server) this);
        } else {
            currentGame = new gamed.client.HiLo.Plugin((Server) this);
        }
        stop();
        currentGame.start();
        java.awt.Container c = getContentPane();
        c.add(currentGame, "currentGame");
        CardLayout cl = (CardLayout) c.getLayout();
        cl.show(c, "currentGame");
    }
}
